# -*- coding: cp936 -*-

import os
import sys
import glob
import datetime
from xml.dom.minidom import parse, parseString
from xml.dom import getDOMImplementation

DATA_ROOT_NAME = "LocalDatas"
DATA_RECORD_NAME = "LocalData"
EXCEL_XML_DIR_NAME = "excel"
TABLE_SQL_DIR_NAME = "sql"
LOCAL_DATA_FILE_MACRO = "LOCALDATATYPE"

strNotify = """\
// ----------------------------------------------------------------------
/// @file			LocalDataType.h
/// @brief			本地加载数据的数据结构定义
/// 				禁止手动修改!!!由%s自动生成
/// @author         陈智(chenzhi@sixcube.cn)
/// @copyright		六次方信息技术有限公司(SIXCUBE Information Technology Co., Ltd.)
/// @date			2008-7-15 15:13:12
// -----------------------------------------------------------------------\
"""
##strNotify = """\
##/* --------------------------------------------------------------------
## * DONT MODIFY!
## * This file was automatically generated by %s.
## * Date: %s
## * -------------------------------------------------------------------- */
##"""

strMacroDefineBegin = """
#ifndef __%s_H__
#define __%s_H__
"""

strMacroDefineEnd = """
#endif /* __%s_H__ */
"""

strCommentBegin = """
//////////////////////////////////////////////////////////////////////////
/**
  * @name		: %s
    * @brief	: %s
	  * @remark	: %s
	    */
"""

strCommentEnd = """
//////////////////////////////////////////////////////////////////////////
"""

class DataConverter:
    def __init__(self):
        self.domList = list()
        self.domFileDict = dict()

    def Eat(self, xmlFilePath):
        print "Parse file %s." % xmlFilePath
        xmlDom = parse(xmlFilePath)
        self.domList.append(xmlDom)
        self.domFileDict[xmlDom] = xmlFilePath

    def GetDataFieldInfoDict(self, domNode, fieldInfoList):
        fieldInfoList.append(("nDataExcept", "unsigned int", "version except flags", 1))
        fieldInfoList.append(("nDataDiff", "unsigned int", "version differentiation flags", 1))
            
        """ 构造单个C++结构定义 """
        for child in domNode.childNodes:
            if child.nodeName != "field":
                continue
            
            attrs = child.attributes
            if attrs.has_key("isclient") and attrs["isclient"].value == "1":
                continue
                
            fieldName = attrs["field"].value
            fieldType = attrs["type"].value
            fieldComment = attrs["comment"].value
            fieldLength = 1
            if fieldType == "string":
                fieldType = "char"
                fieldSize = attrs["size"].value
                fieldLength = int(fieldSize) / 4
            elif fieldType == "uint":
                fieldType = "unsigned int"
            elif fieldType == "bool":
                fieldType = "signed char"
            elif fieldType == "byte":
                fieldType = "unsigned char"
            elif fieldType == "int64":
                fieldType = "INT64"
                fieldLength = 2
            elif fieldType == "uint64":
                fieldType = "UINT64"
                fieldLength = 2
            
            fieldInfoList.append((fieldName, fieldType, fieldComment, fieldLength))

    def MakeCppStruct(self, domNode, file, fieldInfoList):
        """ 构造单个C++结构定义 """
        name = domNode.nodeName
        
        file.write("struct %s\n{\n" % name)
        
        for (fieldName, fieldType, fieldComment, fieldLength) in fieldInfoList:
            if fieldType == "char":
                fieldName += ("[%d]" % (fieldLength * 4))
                
            strCode = "\t%-16s %-30s %s\n" % (
                fieldType,
                fieldName+";",
                "///< " + fieldComment)
            
            file.write(strCode.encode("gbk"));
            
        file.write("};\n")

    def MakeCppStructEnum(self, domNode, file, fieldInfoList):
        """ 构造C++定义结构字段枚举 """
        name = domNode.nodeName
        
        file.write("\nenum enum_%s\n{\n" % name.upper())
        
        enumHeadName = name.upper()
        
        strBase = "BASE"
        enumBaseName = "%s_%s" % (enumHeadName, strBase)
        file.write("\t%-32s = 0,\n" % enumBaseName)
        
        curFieldLength = 0
        for (fieldName, fieldType, fieldComment, fieldLength) in fieldInfoList:
            enumName = "%s_%s" % (enumHeadName, fieldName.upper())
            strCode = "\t%-32s = %s + %-8s %s\n" % (
                enumName, 
                enumBaseName, 
                str(curFieldLength) + ",", 
                "///< " + fieldComment)
            
            curFieldLength += fieldLength
            
            file.write(strCode.encode("gbk"));
            
        file.write("};\n")

    def MakeCppStructTable(self, domNode, file, fieldInfoList):
        """ 构造C++定义结构字段枚举 """
        name = domNode.nodeName
        
        strMapName = "g_%s_FieldList" %(name.lower())
        file.write("\nstatic int %s[] = \n{\n" %(strMapName))
        
        enumHeadName = name.upper()
        
        for (fieldName, fieldType, fieldComment, fieldLength) in fieldInfoList:
            enumName = "%s_%s" % (enumHeadName, fieldName.upper())
            strCode = "\t%-36s %s\n" % (
                enumName + ",", 
                "///< " + fieldComment)
            
            file.write(strCode.encode("gbk"));
            
        file.write("};\n")

    def MakeSimpleCppFile(self, domNode, file, xmlFileName = ""):
        """ 构造单个C++定义文件 """
        name = domNode.nodeName
        file.write(strMacroDefineBegin %(name.upper(), name.upper()))
        file.write(strCommentBegin %(name, "", xmlFileName))
        
        fieldInfoList = list()
        self.GetDataFieldInfoDict(domNode, fieldInfoList)
        
        self.MakeCppStruct(domNode, file, fieldInfoList)
        self.MakeCppStructEnum(domNode, file, fieldInfoList)
        self.MakeCppStructTable(domNode, file, fieldInfoList)
        
        file.write(strMacroDefineEnd %name.upper())

    def MakeAllCpp(self, dirPath):
        """ 构造所有C++定义文件到多个.h文件 """
        for dom in self.domList:
            domNode = dom.childNodes[0]
            fileName = domNode.nodeName
            xmlFileName = self.domFileDict[dom]
            
            if not os.path.exists(dirPath):
                os.mkdir(dirPath)
            file = open(os.path.join(dirPath, "%s.h" %fileName), "w+")
            
            self.MakeSimpleCppFile(domNode, file, xmlFileName)

    def MakeXdsCppFile(self, domNode, file, xmlFileName = ""):
        """ 构造单个C++定义文件 """
        name = domNode.nodeName
        attrs = domNode.attributes
        if attrs.has_key("isclient") and attrs["isclient"].value == "1":
            return
        
        file.write(strCommentBegin %(name, "", xmlFileName))
        
        fieldInfoList = list()
        self.GetDataFieldInfoDict(domNode, fieldInfoList)
        
        self.MakeCppStruct(domNode, file, fieldInfoList)
        
        file.write("\nextern struct %s *g_%s;\n" %(name, name))

    def MakeSingleCpp(self, filePath):
        """ 构造所有C++定义文件到单个.h文件 """
        file = open(filePath, "w+")
        
##        file.write(strNotify %(os.path.basename(sys.argv[0]), datetime.datetime.now()))
        file.write(strNotify %(os.path.basename(sys.argv[0])))
        file.write(strMacroDefineBegin %(LOCAL_DATA_FILE_MACRO, LOCAL_DATA_FILE_MACRO))
        
        for dom in self.domList:
            domNode = dom.childNodes[0]
            xmlFileName = self.domFileDict[dom]
            
            self.MakeXdsCppFile(domNode, file, xmlFileName)
            
        file.write(strMacroDefineEnd %LOCAL_DATA_FILE_MACRO)
        
        print "Ouput file %s." % filePath

    def MakeSqlFile(self, domNode, file):
        """ 构造单个C++定义文件 """
        name = domNode.nodeName
        
        file.write("CREATE TABLE %s (\n" % name)
        
        idx = 0
        for child in domNode.childNodes:
            idx += 1
            
            if child.nodeName != "field":
                continue
            attrs = child.attributes

            fieldName = attrs["field"].value
            fieldType = attrs["type"].value
            fieldComment = attrs["comment"].value
            if fieldType == "string":
                fieldType = "varchar" + ("(%s)" % attrs["size"].value) + " NOT NULL default ''";
            elif fieldType == "int":
                fieldType = "int(11) NOT NULL default '0'"
            elif fieldType == "uint":
                fieldType = "int(11) unsigned NOT NULL default '0'"
            elif fieldType == "bool":
                fieldType = "tinyint(1) default '0'"
            elif fieldType == "float":
                fieldType = "float(9, 3) default '0.000'"
            elif fieldType == "int64":
                fieldType = "bigint(20) NOT NULL default '0'"
            elif fieldType == "uint64":
                fieldType = "bigint(20) unsigned NOT NULL default '0'"
            elif fieldType == "uuid":
                fieldType = "binary(16) NOT NULL"
            elif fieldType == "byte":
                fieldType = "smallint(6) NOT NULL default '0'"
            
            if len(domNode.childNodes) <= idx + 1:
                strCode = "  %s %s\n" % (fieldName, fieldType)
            else:
                strCode = "  %s %s,\n" % (fieldName, fieldType)
            
            file.write(strCode.encode("gbk"));
            
        file.write(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n") 

    def MakeSql(self, dirPath):
        """ 构造所有数据表定义文件 """
        for dom in self.domList:
            domNode = dom.childNodes[0]
            fileName = domNode.nodeName
            
            if not os.path.exists(dirPath):
                os.mkdir(dirPath)
            file = open(os.path.join(dirPath, "%s.sql" %fileName), "w+")
            
            self.MakeSqlFile(domNode, file)

    def MakeXmlFile(self, domNode, file):
        """ 构造单个XML格式化文件 """
        name = domNode.nodeName
        
        (xmlDom, dataNode) = self.CreateXmlDom(name)
        
        newNode = xmlDom.createElement("entry")
        entryNode = dataNode.appendChild(newNode)
        attrs = domNode.attributes
        #if not attrs.has_key("isclient") or attrs["isclient"].value == "0":
        newNode = xmlDom.createElement("nDataExcept")
        newNode = entryNode.appendChild(newNode)
        newNode.appendChild(xmlDom.createTextNode(""))
        newNode = xmlDom.createElement("nDataDiff")
        newNode = entryNode.appendChild(newNode)
        newNode.appendChild(xmlDom.createTextNode(""))
        
        for child in domNode.childNodes:
            if child.nodeName != "field":
                continue
            attrs = child.attributes

            fieldName = attrs["field"].value
            
            newNode = xmlDom.createElement(fieldName)
            newNode = entryNode.appendChild(newNode)
            newNode.appendChild(xmlDom.createTextNode(""))
            
        entryNodeNew = entryNode.cloneNode(True)
        dataNode.appendChild(entryNodeNew)
        
##        strXml = xmlDom.toprettyxml()
        strXml = xmlDom.toxml("UTF-8")
        file.write(strXml)

    def MakeXml(self, dirPath):
        """ 构造所有XML格式化文件 """
        for dom in self.domList:
            domNode = dom.childNodes[0]
            fileName = domNode.nodeName
            
            if not os.path.exists(dirPath):
                os.mkdir(dirPath)
            file = open(os.path.join(dirPath, "%s_table.xml" %fileName), "w+")
            
            self.MakeXmlFile(domNode, file)

    def CreateXmlDom(self, dataName):
        """ 创建XML构造DOM """
        domImp = getDOMImplementation()
        dom = domImp.createDocument(None, None, None)
        
        newNode = dom.createElement(DATA_ROOT_NAME)
        dataNode1 = dom.appendChild(newNode)
        
        newNode = dom.createElement(DATA_RECORD_NAME)
        dataNode2 = dataNode1.appendChild(newNode)
        
        newNode = dom.createElement("g_%s" %dataName)
        dataNode3 = dataNode2.appendChild(newNode)
        
        return (dom, dataNode3)

def main():
    strUsage = "Usage: data_converter.py -d TableDefineDir -s OutputFile"
    
    argCount = len(sys.argv)
    validCountList = [5]
    if argCount not in validCountList:
        print strUsage
        return
    
    if 5 == argCount:
        if "-d" == sys.argv[1]:
            defDirPath = sys.argv[2]
        
        converter = DataConverter()
        
        fileList = glob.glob(os.path.join(defDirPath, "*.xml"))
        for aFilePath in fileList:
            converter.Eat(aFilePath)
        
        if "-s" == sys.argv[3]:
            # 构造所有C++定义文件到单个.h文件
            filePath = sys.argv[4]
            converter.MakeSingleCpp(filePath)
            converter.MakeXml(os.path.join(defDirPath, EXCEL_XML_DIR_NAME))
        elif "-a" == sys.argv[3]:
            # 构造所有C++定义文件到多个.h文件
            dirPath = sys.argv[4]
            converter.MakeAllCpp(dirPath)
            converter.MakeSql(os.path.join(defDirPath, TABLE_SQL_DIR_NAME))
        
##    machine.MakeSql(open("sql//table_init.sql", "w+"))


if __name__=="__main__":
    main()
