#!/usr/bin/python

import sys
import re
from printer import Printer


def GetComment(line):
    what = re.compile(".*//(.*)").match(line)
    if what != None and len(what.groups()) > 0:
        return what.groups()[0]
    else:
        return ""


def Transform(filename, out):
    parsed = []
    lines = open(filename).readlines()

    printer = Printer(out)
    printer.AppendLine("// Generated by inltogo.py. DO NOT EDIT!")
    printer.AppendLine("")
    printer.AppendLine("module MessageType{")
    printer.AppendLine("")
    #
    # printer.AppendLine("import \"uninet/types\"")
    # printer.AppendLine("")
    # printer.AppendLine("const ( // Message Type")
    printer.IncIndent()

    printer.AppendLine("export var MsgIdMap=[];")


    re_assign = re.compile("MSGTYPE_DECLARE_ASSIGN\((\S+),\s*(\d+)\)")
    re_declare = re.compile("MSGTYPE_DECLARE\(\s*(\S+)\s*\)")

    index = 0
    for line in lines:
        if "MSGTYPE_BEGIN_BLOCK" in line:
            pass


        # prase assign state
        what = re_assign.match(line)
        if what is not None:
            msgName = what.groups()[0]
            assIndex = what.groups()[1]

            comment = GetComment(line).decode("gbk", "ignore").encode('utf8')

            printer.AppendLine("export var %s:number = %s;    // %s"
                               % (msgName, assIndex, comment))
            if msgName == "MSG_LAST":
                parsed.append("MsgIdMap[%s] =  \"%s\"; }    // %s" % (assIndex, msgName, comment))
            else:
                parsed.append("MsgIdMap[%s] = \"%s\";    // %s" % (assIndex, msgName, comment))
            index = int(assIndex)
            continue

        # parse declcare statements
        what = re_declare.match(line)
        if what != None:
            msgName = what.groups()[0]
            comment = GetComment(line).decode("gbk", "ignore").encode('utf8')
            assIndex = index + 1
            printer.AppendLine("export var %s:number = %s;   // %s" % (msgName, assIndex, comment))
            if msgName == "MSG_LAST":
                parsed.append("MsgIdMap[%s] = \"%s\"; }    // %s" % (assIndex, msgName, comment))
            else:
                parsed.append("MsgIdMap[%s] = \"%s\";    // %s" % (assIndex, msgName, comment))
            index = assIndex
            continue

        line = line.strip()
        if line.startswith("//") or len(line) == 0:
            printer.AppendLine("%s" % line.decode("gbk", "ignore").encode('utf8'))
        else:
            printer.AppendLine("// %s" % line.decode("gbk", "ignore").encode('utf8'))

    printer.DecIndent()
    printer.AppendLine("")
    printer.IncIndent()
    for parsed_line in parsed:
        printer.AppendLine(parsed_line)
    printer.DecIndent()
    printer.AppendLine("")

    printer.Flush()


if __name__ == "__main__":
    """
    usage: inttoas.py INL_FILE OUT_FILE
    """
    input_path = sys.argv[1]
    output_path = None
    if len(sys.argv) > 2:
        output_path = sys.argv[2]
    Transform(input_path, output_path)
