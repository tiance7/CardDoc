# -*_ encoding: gbk -*-
#!/usr/bin/python
# --------------------------------------------------------------------
# 此程序会根据message_type的定义文件，生成erlang的宏定义头文件，和一个帮助
# 模块，这个模块一个通过协议ID查询协议名的函数.
# --------------------------------------------------------------------

import sys
import re
from printer import Printer

def GetComment(line):
    what = re.compile(".*//(.*)").match(line)
    if what != None and len(what.groups()) > 0:
        return what.groups()[0]
    else:
        return ""

def decode(text):
    return text

def Transform(filename, hrlout, erlout):
    lines = open(filename).readlines()
    
    re_assign = re.compile("MSGTYPE_DECLARE_ASSIGN\((\S+),\s*(\d+)\)")
    re_declare = re.compile("MSGTYPE_DECLARE\(\s*(\S+)\s*\)")

    declare_list = []
    index = 0
    for line in lines:
        if "MSGTYPE_BEGIN_BLOCK" in line:       	
            pass            
        
        # prase assign state
        what = re_assign.match(line)        
        if what != None:
            msgName = what.groups()[0]
            index = int(what.groups()[1])
            comment = GetComment(line)
            declare = ("declare", msgName, index, decode(comment))
            declare_list.append(declare)
            continue

        # parse declcare statements
        what = re_declare.match(line)
        if what != None:
            msgName=what.groups()[0]
            comment = GetComment(line)
            index +=1
            declare = ("declare", msgName, index, decode(comment))
            declare_list.append(declare)
            continue
        
        line = line.strip()
        if line.startswith("%%%%") or len(line) == 0:
            declare = ("comment", "%s" % decode(line))
            declare_list.append(declare)
        else:
            declare = ("comment", "%%%% %s" % decode(line))
            declare_list.append(declare)

    printer = Printer(hrlout)
    printer.AppendLine("%%% generated by inltohrl.py. DO NOT EDIT!")
    for d in declare_list:
        if d[0] == "declare":
            msg_name = d[1]; index=d[2]; comment=d[3]
            printer.AppendLine("-define(%s, %d). %%%s" % \
                               (msg_name, index, comment))
        elif d[0] == "comment":
            printer.AppendLine("%s" % d[1])
    printer.Flush()

    erl_printer = Printer(erlout)
    erl_printer.AppendLine("%%% generated by inltohrl.py. DO NOT EDIT!")
    erl_printer.AppendLine("""\
-module(message_type).

-export([atom_to_id/1, id_to_atom/1]).

atom_to_id(Atom) -> convert(atom_to_id, Atom).
id_to_atom(Id) -> convert(id_to_atom, Id).

""")
    
    for d in declare_list:
        if d[0] == "declare":
            msg_name = d[1]; index=d[2]; comment=d[3]
            erl_printer.AppendLine("%%%%%s" % comment)
            erl_printer.AppendLine(
"""convert(id_to_atom, %d) -> 
    '%s';""" % (index, msg_name))
            erl_printer.AppendLine(
"""convert(atom_to_id, '%s') -> 
    %d;""" % (msg_name, index))

    erl_printer.AppendLine("convert(D, V) -> {unknown_convert, {D, V}}. ")
    erl_printer.Flush()


if __name__ == "__main__":
    """
    usage: inttoas.py INL_FILE OUT_FILE
    """
    
    input_path = "..\\proto_out\\message.inl"
    hrl_output_path = "..\\erl_out\\message_type.hrl"
    erl_output_path = "..\\erl_out\\message_type.erl"
    if len(sys.argv) > 3:
	input_path = sys.argv[1]
        hrl_output_path = sys.argv[2]
        erl_output_path = sys.argv[3]
    Transform(input_path, hrl_output_path, erl_output_path)
